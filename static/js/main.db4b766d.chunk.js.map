{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","countries","filter","item","country","toLowerCase","includes","map","i","Card","bg","text","className","style","margin","Header","ListGroup","variant","Item","cases","todayCases","deaths","todayDeaths","recovered","active","critical","textAlign","CardDeck","Body","Title","Text","Form","Group","controlId","Control","type","placeholder","width","onChange","e","target","value","queries","columns","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db4b766d.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport Columns from 'react-columns';\nimport Form from 'react-bootstrap/Form';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nfunction App() {\n  const [latest,setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [searchCountries,setSearchCountries] = useState([]);\n  useEffect(()  => {\n    axios\n    .all([\n      axios.get(\"https://coronavirus-19-api.herokuapp.com/all\"),\n      axios.get(\"https://coronavirus-19-api.herokuapp.com/countries\")\n    ])\n    .then(responseArr => {\n      setLatest(responseArr[0].data);\n      setResults(responseArr[1].data);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  },[]);\n\n  const filterCountries = results.filter(item => {    \n    return searchCountries!==\"\" ? item.country.toLowerCase().includes(searchCountries) : item;\n  });\n\n  const countries = filterCountries.map((data, i) => {\n    return(\n    <Card key={i} bg=\"light\" text=\"dark\" className=\"text-center\" style={{margin:\"10px\"}}>\n       <Card.Header>{data.country}</Card.Header>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>Cases : {data.cases}</ListGroup.Item>\n            <ListGroup.Item>Today's Cases :  {data.todayCases}</ListGroup.Item>\n            <ListGroup.Item>Deaths : {data.deaths}</ListGroup.Item>\n            <ListGroup.Item>Today's Deaths :  {data.todayDeaths}</ListGroup.Item>\n            <ListGroup.Item>Recovered : {data.recovered}</ListGroup.Item>\n            <ListGroup.Item>Active : {data.active}</ListGroup.Item>\n            <ListGroup.Item>Critical : {data.critical}</ListGroup.Item>\n          </ListGroup>\n    </Card>\n    );\n  });\n\n  var queries = [{\n    columns:2,\n    query: 'min-width: 500px'\n  },{\n    columns:3,\n    query: 'min-width: 1000px'\n  }];\n\n  return (\n    <div className=\"App\">\n      <br/>\n      <h2 style={{textAlign:\"center\"}}>Covid-19 Latest Statistics</h2>\n      <br/>\n      <CardDeck>\n        <Card bg=\"secondary\" text={\"white\"} className=\"text-center\" style={{margin:\"30px\"}}>\n          <Card.Body>\n            <Card.Title>Cases</Card.Title>\n            <Card.Text>{latest.cases}</Card.Text>\n          </Card.Body>\n        </Card>\n        <Card bg=\"danger\" text={\"white\"} className=\"text-center\" style={{margin:\"30px\"}}>    \n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>{latest.deaths}</Card.Text>\n          </Card.Body>    \n        </Card>\n        <Card bg=\"success\" text={\"white\"} className=\"text-center\" style={{margin:\"30px\"}}>    \n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>{latest.recovered}</Card.Text>\n          </Card.Body>    \n        </Card>\n      </CardDeck>\n      <br/>\n      <Form>\n        <Form.Group controlId=\"formBasicSearch\" >\n          {/* <Form.Label>Search</Form.Label> */}\n          <Form.Control type=\"text\" placeholder=\"Search by Country\" style={{margin:\"30px\", width:\"300px\"}}\n          onChange={e=> setSearchCountries(e.target.value.toLowerCase())}/>          \n        </Form.Group>\n      </Form>\n      <Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}